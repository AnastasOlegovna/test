"""
Имитировать неудачную попытку входа в систему с блокировкой пользователя на 5 минут.
Выводить сообщение "Вы заблокированы! Следующая попытка через N мин."
для решение понадобится:
1. хранить дату/время - последняя НЕ удачная попытка входа в формате JSON
2. действия с датой лучше вынести в отдельные функци
Перенести функционал программы login с глобальной переменной в файл.
Данные хранить в формате JSON
"""
import argparse
import json
from datetime import datetime, timedelta


def save_dict(x: dict):
    with open("mydict.json", "wt") as file:
        json.dump(x, file)


def read_dict():
    with open("mydict.json", "rt") as file:
        y = json.load(file)
        return y


# перезаписываем в словарь mydict.json дату/время входа юзера в привязке к его логину из командной строки
def save_datetime_enter():
    user = parser_command()[0]
    data = datetime.now().strftime('%d.%m.%Y %H:%M')
    # открываем словарь в json и преобразовываем его (добавляем дату), вызываем read_dict()
    newDict2 = read_dict()
    for v in newDict2.values():
        for j in list(v):
            if j == user:
                v["last_enter"] = data
    save_dict(newDict2)  # сохраняем последнюю попытку входа, вызываем save_dict
    return data


# Определяем собственное исключение
class UserDoesNotExist(BaseException):
    ...


# функция ввода аргументов командной строки ('-user', '--password')
def parser_command():
    parser = argparse.ArgumentParser()
    parser.add_argument('-user', type=str)
    parser.add_argument('--password', type=str)
    args = parser.parse_args()
    return args.user, args.password


def decorator(func):
    def wrapper(user_main, password_main):

        if not check_password(user_main, password_main):
            return False

        if not authenticate():
            return False

        return func(user_main, password_main)

    return wrapper


@decorator
def login(username, password) -> bool:
    """
    :param username:str
    :param password:str
    :return: возвращает bool значение при условии прохождения проверки пользователя
    """
    return True


def authenticate() -> bool:
    """
    :return: возвращает bool значение и авторизирует пользователя при условии прохождения проверки
    """
    return True


def check_password(user, password) -> bool:  # проверка пароля
    try:
        NewDict = read_dict()   # открываем файл в режиме чтения
        for v in NewDict.values():
            for j, k in v.items():
                if (user, password) in v.items():
                    return (user, password) in v.items()
                    break
            # Вызываем собственное исключение 'UserDoesNotExist' с сообщением об ошибке
        else:
            raise UserDoesNotExist('Введенный логин/пароль не корректный')
    except UserDoesNotExist as err:
        print(err)


def main():
    user__ = parser_command()[0]
    password__ = parser_command()[1]
    count = 3
    if user__ is None and password__ is None:
        print('Введите имя и пароль с командной строки')
    elif password__ is None:
        print('Введите пароль с командной строки: ')
    elif user__ is None:
        print('Введите логин с командной строки: ')
    else:
        while count >= 0:
            if count == 0:
                print("Попытки истекли!")
                print(f"Вы заблокированы! Следующая попытка через 5 мин")
                print(f'Неудачная попытка входа {save_datetime_enter()}')
                save_datetime_enter()
                break
            if check_password(user__, password__):  # если имя и пароль из ком строки ->bool
                user = input("Введите имя: ")
                password = input("Введите пароль: ")
                if login(user, password):
                    print("Вы в системе!")
                    break
                else:
                    count -= 1
                    print(f"Не правильное Имя или Пароль. У вас осталось {count} попыток")
            else:
                count -= 1
                print(f"Не правильное Имя или Пароль. У вас осталось {count} попыток")
                user__ = input('Введите логин с командной строки: ')
                password__ = input('Введите пароль с командной строки: ')


if __name__ == '__main__':
    dict_password = {
        'Ivan': {'ivan': '12345', 'Last_enter': None},
        'Katya': {'katya': 'myparol1245', 'last_enter': None},
        'Petya': {'petya': 'trampampam12', 'last_enter': None}
    }
    save_dict(dict_password)    # сохраняем наш словарь при первом запуске
    main()
